#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  sourceFiles: [
    'mainpage_ui.json',
    'searchpage_ui.json', 
    'clinic_ui.json',
  ],
  outputDir: 'assets/images/base64',
  manifestFile: 'assets/images/base64/manifest.json',
};

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
if (!fs.existsSync(CONFIG.outputDir)) {
  fs.mkdirSync(CONFIG.outputDir, { recursive: true });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ JSON
function extractBase64Images(jsonContent, sourceFile) {
  const images = [];
    
  // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ imageData –º–∞—Å—Å–∏–≤–æ–≤
  const imageDataRegex = /"imageData":\s*\[([^\]]+)\]/g;
    
  let match;
  while ((match = imageDataRegex.exec(jsonContent)) !== null) {
    try {
      // –ü–∞—Ä—Å–∏–º –º–∞—Å—Å–∏–≤ base64 —Å—Ç—Ä–æ–∫
      const imageDataArray = JSON.parse(`[${match[1]}]`);
            
      imageDataArray.forEach((base64String, index) => {
        if (typeof base64String === 'string' && base64String.startsWith('/9j/')) {
          // –°–æ–∑–¥–∞–µ–º —Ö–µ—à –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
          const hash = crypto.createHash('sha1').update(base64String).digest('hex');
                    
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Å–∏–≥–Ω–∞—Ç—É—Ä–µ
          let extension = 'jpg'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é JPEG
          if (base64String.startsWith('iVBOR')) {
            extension = 'png';
          } else if (base64String.startsWith('R0lGOD')) {
            extension = 'gif';
          } else if (base64String.startsWith('UklGR')) {
            extension = 'webp';
          }
                    
          const filename = `${hash}.${extension}`;
          const filepath = path.join(CONFIG.outputDir, filename);
                    
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª
          if (!fs.existsSync(filepath)) {
            try {
              // –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
              const buffer = Buffer.from(base64String, 'base64');
              fs.writeFileSync(filepath, buffer);
                            
              console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${filename} (${(buffer.length / 1024).toFixed(1)}KB)`);
            } catch (error) {
              console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ${filename}:`, error.message);
              return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            }
          } else {
            console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç): ${filename}`);
          }
                    
          // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
          const stats = fs.statSync(filepath);
                    
          images.push({
            hash,
            filename,
            extension,
            size: stats.size,
            sizeKB: Math.round(stats.size / 1024 * 10) / 10,
            sourceFile,
            arrayIndex: index,
            localPath: `assets/images/base64/${filename}`,
            base64Preview: `${base64String.substring(0, 50)  }...`,
          });
        }
      });
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ imageData –≤ ${sourceFile}:`, error.message);
    }
  }
    
  return images;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ UI JSON —Ñ–∞–π–ª–æ–≤...\n');
    
  const allImages = [];
  let totalFiles = 0;
  let totalSize = 0;
    
  for (const sourceFile of CONFIG.sourceFiles) {
    if (!fs.existsSync(sourceFile)) {
      console.log(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${sourceFile}`);
      continue;
    }
        
    console.log(`üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: ${sourceFile}`);
        
    try {
      const jsonContent = fs.readFileSync(sourceFile, 'utf8');
      const images = extractBase64Images(jsonContent, sourceFile);
            
      console.log(`   –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${images.length}`);
            
      allImages.push(...images);
      totalFiles += images.length;
      totalSize += images.reduce((sum, img) => sum + img.size, 0);
            
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ${sourceFile}:`, error.message);
    }
        
    console.log(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
  }
    
  // –°–æ–∑–¥–∞–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç
  const manifest = {
    generated: new Date().toISOString(),
    totalImages: totalFiles,
    totalSizeBytes: totalSize,
    totalSizeKB: Math.round(totalSize / 1024 * 10) / 10,
    totalSizeMB: Math.round(totalSize / (1024 * 1024) * 100) / 100,
    sourceFiles: CONFIG.sourceFiles,
    images: allImages.sort((a, b) => b.size - a.size), // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É
  };
    
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç
  fs.writeFileSync(CONFIG.manifestFile, JSON.stringify(manifest, null, 2));
    
  // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  console.log('üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
  console.log(`   –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${totalFiles}`);
  console.log(`   –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${manifest.totalSizeKB} KB (${manifest.totalSizeMB} MB)`);
  console.log(`   –ú–∞–Ω–∏—Ñ–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${CONFIG.manifestFile}`);
    
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
  console.log('\nüìÅ –ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:');
  CONFIG.sourceFiles.forEach(file => {
    const fileImages = allImages.filter(img => img.sourceFile === file);
    const fileSize = fileImages.reduce((sum, img) => sum + img.size, 0);
    console.log(`   ${file}: ${fileImages.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (${Math.round(fileSize / 1024 * 10) / 10} KB)`);
  });
    
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–æ—Ä–º–∞—Ç–∞–º
  console.log('\nüé® –ü–æ —Ñ–æ—Ä–º–∞—Ç–∞–º:');
  const formatStats = {};
  allImages.forEach(img => {
    if (!formatStats[img.extension]) {
      formatStats[img.extension] = { count: 0, size: 0 };
    }
    formatStats[img.extension].count++;
    formatStats[img.extension].size += img.size;
  });
    
  Object.entries(formatStats).forEach(([format, stats]) => {
    console.log(`   .${format}: ${stats.count} —Ñ–∞–π–ª–æ–≤ (${Math.round(stats.size / 1024 * 10) / 10} KB)`);
  });
    
  // –¢–æ–ø-5 —Å–∞–º—ã—Ö –±–æ–ª—å—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  console.log('\nüìè –¢–æ–ø-5 —Å–∞–º—ã—Ö –±–æ–ª—å—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:');
  allImages.slice(0, 5).forEach((img, index) => {
    console.log(`   ${index + 1}. ${img.filename} - ${img.sizeKB} KB (${img.sourceFile})`);
  });
    
  console.log('\n‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main().catch(error => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
}); 